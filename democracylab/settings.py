"""
Django settings for democracylab project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
#TODO: Call out any missing required environment variables during startup
import os
import ast
import dj_database_url
from datetime import timedelta
from distutils.util import strtobool
from django.core.mail.backends.smtp import EmailBackend

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.environ.get('DJANGO_DEBUG'))

ALLOWED_HOSTS = ['*']

S3_BUCKET = os.environ.get('S3_BUCKET')

# Application definition

INSTALLED_APPS = [
    'civictechprojects.apps.CivictechprojectsConfig',
    'common.apps.CommonConfig',
    'democracylab.apps.DemocracylabConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'rest_framework',
    'taggit'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'democracylab.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_ROOT, 'democracylab/templates'),
            os.path.join(PROJECT_ROOT, 'democracylab/templates/emails'),
            os.path.join(PROJECT_ROOT, 'civictechprojects/templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'democracylab.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DL_DATABASE = os.environ.get('DL_DATABASE', '')

DATABASES = ast.literal_eval(DL_DATABASE) if DL_DATABASE else {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'p0stgres!',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

db_from_env = dj_database_url.config()
DATABASES['default'].update(db_from_env)

LOGIN_REDIRECT_URL = '/'

#Caching number of tag counts only for now - change this if other things are db-cached
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'default_db_cache',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

# Make sure to keep these in sync with the validators in SignUpController.jsx
# TODO: Find a validator for verifying password contains at least 1 number, letter, and non-alphanumeric character
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
    ],
    'PAGE_SIZE': 10
}


def read_connection_config(config):
    return config and {
        'from_name': '{name} <{email_address}>'.format(name=config['display_name'], email_address=config['username']),
        'connection': EmailBackend(
            host=config['host'],
            port=int(config['port']),
            username=config['username'],
            password=config['password'],
            use_tls=strtobool(config['use_tls']),
            fail_silently=False,
            use_ssl=strtobool(config['use_ssl']),
            timeout=None,
            ssl_keyfile=None,
            ssl_certfile=None)
    }

EMAIL_SUPPORT_ACCT = read_connection_config(ast.literal_eval(os.environ.get('EMAIL_SUPPORT_ACCT', 'None')))
EMAIL_VOLUNTEER_ACCT = read_connection_config(ast.literal_eval(os.environ.get('EMAIL_VOLUNTEER_ACCT', 'None')))

# Default log to console in the absence of any account configurations
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

PROTOCOL_DOMAIN = os.environ['PROTOCOL_DOMAIN']
ADMIN_EMAIL = os.environ['ADMIN_EMAIL']
FAKE_EMAILS = not EMAIL_SUPPORT_ACCT or not EMAIL_VOLUNTEER_ACCT or os.environ.get('FAKE_EMAILS', False) == 'True'

APPLICATION_REMINDER_PERIODS = ast.literal_eval(os.environ.get('APPLICATION_REMINDER_PERIODS', 'None'))
VOLUNTEER_RENEW_REMINDER_PERIODS = ast.literal_eval(os.environ.get('VOLUNTEER_RENEW_REMINDER_PERIODS', 'None'))
VOLUNTEER_REMINDER_OVERALL_PERIOD = VOLUNTEER_RENEW_REMINDER_PERIODS and timedelta(sum(VOLUNTEER_RENEW_REMINDER_PERIODS))
VOLUNTEER_CONCLUDE_SURVEY_URL = os.environ.get('VOLUNTEER_CONCLUDE_SURVEY_URL', '')


FOOTER_LINKS = os.environ.get('FOOTER_LINKS', '')

HEADER_ALERT = os.environ.get('HEADER_ALERT', '')

PROJECT_DESCRIPTION_EXAMPLE_URL = os.environ.get('PROJECT_DESCRIPTION_EXAMPLE_URL', '')
POSITION_DESCRIPTION_EXAMPLE_URL = os.environ.get('POSITION_DESCRIPTION_EXAMPLE_URL', '')


SECURE_SSL_REDIRECT = os.environ.get('DL_SECURE_SSL_REDIRECT', False) == 'True'

# Note: This environment variable should only be applied in Production
HOTJAR_APPLICATION_ID = os.environ.get('HOTJAR_APPLICATION_ID', '')

GOOGLE_PROPERTY_ID = os.environ.get('GOOGLE_PROPERTY_ID', '')

STATIC_CDN_URL = os.environ.get('STATIC_CDN_URL', '')

# TODO: Call out missing required environment variables

# TODO: Set to True in productions
# SESSION_COOKIE_SECURE = True

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'custom_error_handler': {
            'class': 'democracylab.logging.CustomErrorHandler'
        }
    },
    'loggers': {
        # Override global logger
        '': {
            'handlers': ['custom_error_handler'],
            'level': 'ERROR',
            'propagate': True
        },
    },
}
